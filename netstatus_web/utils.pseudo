
PROCEDURE get_mac_address(ip_address)
    # Uses the ARP MAC address table to get the MAC address for a specified IP address.
    # Opens a new subprocess using the 'ping' command line utility. Pings the specified IP address once.

    ping_output = OPEN ping SUBPROCESS with ip_address

    # This means the MAC address is now in our arp table, so we can find it.

    arp_output = OPEN arp SUBPROCESS with ip_address

    # Uses a regular expression to search for the MAC address in the ARP ouput.

    mac_to_return = SEARCH for MAC address corresponding to ip_address using regular expression ([a-fA-F0-9]{2}:){5}([a-fA-F0-9]{2}) in arp_output

    IF no MAC address is found
        RETURN that no MAC address is found
    ELSE
        REPLACE ":" in mac_to_return with ""

        RETURN mac_to_return
END PROCEDURE

def port_ignore_list(device):
    port_list = IgnoredPort.objects.all().filter(device=device).values_list('port', flat=True).order_by('port')
    return port_list

# device_list is a list of device classes
PROCEDURE update_ignored_ports(device_list)
    FOR device IN device_list
        IF device.online == True and device.ipv4_address != "10.49.84.1"

            session = SETUP SNMP SESSION with device.ipv4_address

            lldp_output = WALK SNMP with session and OID "1.0.8802.1.1.2.1.4.1.1.4"

            FOR i IN lldp_output
                # The whole OID is returned. Becuase we only want the port, which is a part of the OID, we need to
                # remove all the preceeding parts of the OID. We also need to remove the last 2
                # characters as they are integers incrementing per port.
                # This check makes sure that the port we are using isn't already in the ports to ignore,
                # and the OID is actually a port.

                port = REPLACE "iso.0.8802.1.1.2.1.4.1.1.4.0." in i.oid with "" and remove last 2 characters

                IF port is not in port_ignore_list(device)) AND port != ""
                    ADD NEW ENTRY TO DATABASE for table IgnoredPort WITH device=device, port=port
END PROCEDURE

PROCEDURE update_mac_to_port(device_list)
    FOR device IN device_list
        if device.ipv4_address != "10.49.84.1" and device.online == True

            session = session = SETUP SNMP SESSION with device.ipv4_address

            # OID for dot1dTpFdbAddress (MAC Address table)
            # http://oid-info.com/get/1.3.6.1.2.1.17.4.3.1.1
            mac_address_table = WALK SNMP with session and OID "1.3.6.1.2.1.17.4.3.1.1"
            # OID for dot1dTpFdbPort (Port table)
            # http://oid-info.com/get/1.3.6.1.2.1.17.4.3.1.2
            port_address_table = WALK SNMP with session and OID ".1.3.6.1.2.1.17.4.3.1.2"

            FOR mac_address IN mac_address_table
                FOR port IN port_address_table
                    # As the port address table and the mac address table have different OIDs, the port address
                    # table one needs to be changed to be the same as the MAC address one. They have exactly the
                    # same OID otherwise, which allows us to get a direct comparison.
                    port_oid = REPLACE "mib-2.17.4.3.1.2" IN port.oid WITH "mib-2.17.4.3.1.1"
                    IF port_oid == mac_address.oid
                        # Check that the port is not in our ignore list
                        IF int(port.value) is not in port_ignore_list(device)
                            # Convert the MAC to hexadecimal and a string, and put it into our database.
                            ADD NEW ENTRY TO DATABASE for table MACtoPort WITH mac_address=bin_to_hex_string(mac_address.value), port=port.value
END PROCEDURE



// Sets up objects based on HTML id's
map = SELECT element "#map" on page
ethernet_port = SELECT element "#eth" on page
input_x = SELECT element "#id_location_x" on page
input_y = SELECT element "#id_location_y" on page


// Sets up event handler for when the map is clicked
CREATE EVENT LISTENER for when "map" is clicked and INVOKE getClick


// When the user clicks on the map...
PROCEDURE getClick(event)
    INITIALISE x
    INITIALISE y

    // Get the rectangle that encompasses our map img. This allows us to get relative x,y co-ordinates
    // for the user click, allowing them to be replicated in any browser when showing the location back
    // This makes it easy to store in our database too!
    rect = GET bounding rectangle of the element "map"

    x = client cursor x co-ordinate - rect.left
    y = client cursor y co-ordinate - rect.top

    // Show the user where they placed the device
    CHANGE "ethernet_port" CSS style "left" to 'x + "px"'
    CHANGE "ethernet_port" CSS style "top" to 'y + "px"'

    input_x value = x
    input_y value = y
END PROCEDURE